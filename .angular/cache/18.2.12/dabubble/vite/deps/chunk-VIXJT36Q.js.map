{
  "version": 3,
  "sources": ["../../../../../../node_modules/rxfire/auth/index.esm.js", "../../../../../../node_modules/@angular/fire/fesm2022/angular-fire-auth.mjs"],
  "sourcesContent": ["import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\nfunction authState(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction user(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction idToken(auth) {\n  return user(auth).pipe(switchMap(function (user) {\n    return user ? from(getIdToken(user)) : of(null);\n  }));\n}\nexport { authState, idToken, user };\n", "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from2, except, desc) => {\n  if (from2 && typeof from2 === \"object\" || typeof from2 === \"function\") {\n    for (let key of __getOwnPropNames(from2)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from2[key],\n      enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// angular-fire-auth.mjs\nvar angular_fire_auth_exports = {};\n__export(angular_fire_auth_exports, {\n  Auth: () => Auth,\n  AuthInstances: () => AuthInstances,\n  AuthModule: () => AuthModule,\n  applyActionCode: () => applyActionCode,\n  authInstance$: () => authInstance$,\n  authState: () => authState,\n  beforeAuthStateChanged: () => beforeAuthStateChanged,\n  checkActionCode: () => checkActionCode,\n  confirmPasswordReset: () => confirmPasswordReset,\n  connectAuthEmulator: () => connectAuthEmulator,\n  createUserWithEmailAndPassword: () => createUserWithEmailAndPassword,\n  deleteUser: () => deleteUser,\n  fetchSignInMethodsForEmail: () => fetchSignInMethodsForEmail,\n  getAdditionalUserInfo: () => getAdditionalUserInfo,\n  getAuth: () => getAuth,\n  getIdToken: () => getIdToken,\n  getIdTokenResult: () => getIdTokenResult,\n  getMultiFactorResolver: () => getMultiFactorResolver,\n  getRedirectResult: () => getRedirectResult,\n  idToken: () => idToken,\n  initializeAuth: () => initializeAuth,\n  initializeRecaptchaConfig: () => initializeRecaptchaConfig,\n  isSignInWithEmailLink: () => isSignInWithEmailLink,\n  linkWithCredential: () => linkWithCredential,\n  linkWithPhoneNumber: () => linkWithPhoneNumber,\n  linkWithPopup: () => linkWithPopup,\n  linkWithRedirect: () => linkWithRedirect,\n  multiFactor: () => multiFactor,\n  onAuthStateChanged: () => onAuthStateChanged,\n  onIdTokenChanged: () => onIdTokenChanged,\n  parseActionCodeURL: () => parseActionCodeURL,\n  provideAuth: () => provideAuth,\n  reauthenticateWithCredential: () => reauthenticateWithCredential,\n  reauthenticateWithPhoneNumber: () => reauthenticateWithPhoneNumber,\n  reauthenticateWithPopup: () => reauthenticateWithPopup,\n  reauthenticateWithRedirect: () => reauthenticateWithRedirect,\n  reload: () => reload,\n  revokeAccessToken: () => revokeAccessToken,\n  sendEmailVerification: () => sendEmailVerification,\n  sendPasswordResetEmail: () => sendPasswordResetEmail,\n  sendSignInLinkToEmail: () => sendSignInLinkToEmail,\n  setPersistence: () => setPersistence,\n  signInAnonymously: () => signInAnonymously,\n  signInWithCredential: () => signInWithCredential,\n  signInWithCustomToken: () => signInWithCustomToken,\n  signInWithEmailAndPassword: () => signInWithEmailAndPassword,\n  signInWithEmailLink: () => signInWithEmailLink,\n  signInWithPhoneNumber: () => signInWithPhoneNumber,\n  signInWithPopup: () => signInWithPopup,\n  signInWithRedirect: () => signInWithRedirect,\n  signOut: () => signOut,\n  unlink: () => unlink,\n  updateCurrentUser: () => updateCurrentUser,\n  updateEmail: () => updateEmail,\n  updatePassword: () => updatePassword,\n  updatePhoneNumber: () => updatePhoneNumber,\n  updateProfile: () => updateProfile,\n  useDeviceLanguage: () => useDeviceLanguage,\n  user: () => user,\n  validatePassword: () => validatePassword,\n  verifyBeforeUpdateEmail: () => verifyBeforeUpdateEmail,\n  verifyPasswordResetCode: () => verifyPasswordResetCode\n});\n\n// public_api.mjs\nvar public_api_exports = {};\n__export(public_api_exports, {\n  Auth: () => Auth,\n  AuthInstances: () => AuthInstances,\n  AuthModule: () => AuthModule,\n  applyActionCode: () => applyActionCode,\n  authInstance$: () => authInstance$,\n  authState: () => authState,\n  beforeAuthStateChanged: () => beforeAuthStateChanged,\n  checkActionCode: () => checkActionCode,\n  confirmPasswordReset: () => confirmPasswordReset,\n  connectAuthEmulator: () => connectAuthEmulator,\n  createUserWithEmailAndPassword: () => createUserWithEmailAndPassword,\n  deleteUser: () => deleteUser,\n  fetchSignInMethodsForEmail: () => fetchSignInMethodsForEmail,\n  getAdditionalUserInfo: () => getAdditionalUserInfo,\n  getAuth: () => getAuth,\n  getIdToken: () => getIdToken,\n  getIdTokenResult: () => getIdTokenResult,\n  getMultiFactorResolver: () => getMultiFactorResolver,\n  getRedirectResult: () => getRedirectResult,\n  idToken: () => idToken,\n  initializeAuth: () => initializeAuth,\n  initializeRecaptchaConfig: () => initializeRecaptchaConfig,\n  isSignInWithEmailLink: () => isSignInWithEmailLink,\n  linkWithCredential: () => linkWithCredential,\n  linkWithPhoneNumber: () => linkWithPhoneNumber,\n  linkWithPopup: () => linkWithPopup,\n  linkWithRedirect: () => linkWithRedirect,\n  multiFactor: () => multiFactor,\n  onAuthStateChanged: () => onAuthStateChanged,\n  onIdTokenChanged: () => onIdTokenChanged,\n  parseActionCodeURL: () => parseActionCodeURL,\n  provideAuth: () => provideAuth,\n  reauthenticateWithCredential: () => reauthenticateWithCredential,\n  reauthenticateWithPhoneNumber: () => reauthenticateWithPhoneNumber,\n  reauthenticateWithPopup: () => reauthenticateWithPopup,\n  reauthenticateWithRedirect: () => reauthenticateWithRedirect,\n  reload: () => reload,\n  revokeAccessToken: () => revokeAccessToken,\n  sendEmailVerification: () => sendEmailVerification,\n  sendPasswordResetEmail: () => sendPasswordResetEmail,\n  sendSignInLinkToEmail: () => sendSignInLinkToEmail,\n  setPersistence: () => setPersistence,\n  signInAnonymously: () => signInAnonymously,\n  signInWithCredential: () => signInWithCredential,\n  signInWithCustomToken: () => signInWithCustomToken,\n  signInWithEmailAndPassword: () => signInWithEmailAndPassword,\n  signInWithEmailLink: () => signInWithEmailLink,\n  signInWithPhoneNumber: () => signInWithPhoneNumber,\n  signInWithPopup: () => signInWithPopup,\n  signInWithRedirect: () => signInWithRedirect,\n  signOut: () => signOut,\n  unlink: () => unlink,\n  updateCurrentUser: () => updateCurrentUser,\n  updateEmail: () => updateEmail,\n  updatePassword: () => updatePassword,\n  updatePhoneNumber: () => updatePhoneNumber,\n  updateProfile: () => updateProfile,\n  useDeviceLanguage: () => useDeviceLanguage,\n  user: () => user,\n  validatePassword: () => validatePassword,\n  verifyBeforeUpdateEmail: () => verifyBeforeUpdateEmail,\n  verifyPasswordResetCode: () => verifyPasswordResetCode\n});\n\n// auth.mjs\nimport { ɵgetAllInstancesOf } from \"@angular/fire\";\nimport { from, timer } from \"rxjs\";\nimport { concatMap, distinct } from \"rxjs/operators\";\nvar AUTH_PROVIDER_NAME = \"auth\";\nvar Auth = class {\n  constructor(auth) {\n    return auth;\n  }\n};\nvar AuthInstances = class {\n  constructor() {\n    return ɵgetAllInstancesOf(AUTH_PROVIDER_NAME);\n  }\n};\nvar authInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\n\n// auth.module.mjs\nimport { InjectionToken, Injector, NgModule, NgZone, Optional, makeEnvironmentProviders } from \"@angular/core\";\nimport { VERSION, ɵAngularFireSchedulers, ɵgetDefaultInstanceOf } from \"@angular/fire\";\nimport { ɵAppCheckInstances } from \"@angular/fire\";\nimport { FirebaseApp, FirebaseApps } from \"@angular/fire/app\";\nimport { registerVersion } from \"firebase/app\";\nimport * as i0 from \"@angular/core\";\nvar PROVIDED_AUTH_INSTANCES = new InjectionToken(\"angularfire2.auth-instances\");\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n  const defaultAuth = ɵgetDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n  return (zone, injector) => {\n    const auth = zone.runOutsideAngular(() => fn(injector));\n    return new Auth(auth);\n  };\n}\nvar AUTH_INSTANCES_PROVIDER = {\n  provide: AuthInstances,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES]]\n};\nvar DEFAULT_AUTH_INSTANCE_PROVIDER = {\n  provide: Auth,\n  useFactory: defaultAuthInstanceFactory,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES], FirebaseApp]\n};\nvar AuthModule = class _AuthModule {\n  constructor() {\n    registerVersion(\"angularfire\", VERSION.full, \"auth\");\n  }\n  static ɵfac = function _AuthModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _AuthModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _AuthModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n  });\n};\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideAuth(fn, ...deps) {\n  registerVersion(\"angularfire\", VERSION.full, \"auth\");\n  return makeEnvironmentProviders([DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER, {\n    provide: PROVIDED_AUTH_INSTANCES,\n    useFactory: authInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, [new Optional(), ɵAppCheckInstances], ...deps]\n  }]);\n}\n\n// rxfire.mjs\nimport { ɵzoneWrap } from \"@angular/fire\";\nimport { authState as _authState, user as _user, idToken as _idToken } from \"rxfire/auth\";\nvar authState = ɵzoneWrap(_authState, true);\nvar user = ɵzoneWrap(_user, true);\nvar idToken = ɵzoneWrap(_idToken, true);\n\n// firebase.mjs\nvar firebase_exports = {};\n__export(firebase_exports, {\n  applyActionCode: () => applyActionCode,\n  beforeAuthStateChanged: () => beforeAuthStateChanged,\n  checkActionCode: () => checkActionCode,\n  confirmPasswordReset: () => confirmPasswordReset,\n  connectAuthEmulator: () => connectAuthEmulator,\n  createUserWithEmailAndPassword: () => createUserWithEmailAndPassword,\n  deleteUser: () => deleteUser,\n  fetchSignInMethodsForEmail: () => fetchSignInMethodsForEmail,\n  getAdditionalUserInfo: () => getAdditionalUserInfo,\n  getAuth: () => getAuth,\n  getIdToken: () => getIdToken,\n  getIdTokenResult: () => getIdTokenResult,\n  getMultiFactorResolver: () => getMultiFactorResolver,\n  getRedirectResult: () => getRedirectResult,\n  initializeAuth: () => initializeAuth,\n  initializeRecaptchaConfig: () => initializeRecaptchaConfig,\n  isSignInWithEmailLink: () => isSignInWithEmailLink,\n  linkWithCredential: () => linkWithCredential,\n  linkWithPhoneNumber: () => linkWithPhoneNumber,\n  linkWithPopup: () => linkWithPopup,\n  linkWithRedirect: () => linkWithRedirect,\n  multiFactor: () => multiFactor,\n  onAuthStateChanged: () => onAuthStateChanged,\n  onIdTokenChanged: () => onIdTokenChanged,\n  parseActionCodeURL: () => parseActionCodeURL,\n  reauthenticateWithCredential: () => reauthenticateWithCredential,\n  reauthenticateWithPhoneNumber: () => reauthenticateWithPhoneNumber,\n  reauthenticateWithPopup: () => reauthenticateWithPopup,\n  reauthenticateWithRedirect: () => reauthenticateWithRedirect,\n  reload: () => reload,\n  revokeAccessToken: () => revokeAccessToken,\n  sendEmailVerification: () => sendEmailVerification,\n  sendPasswordResetEmail: () => sendPasswordResetEmail,\n  sendSignInLinkToEmail: () => sendSignInLinkToEmail,\n  setPersistence: () => setPersistence,\n  signInAnonymously: () => signInAnonymously,\n  signInWithCredential: () => signInWithCredential,\n  signInWithCustomToken: () => signInWithCustomToken,\n  signInWithEmailAndPassword: () => signInWithEmailAndPassword,\n  signInWithEmailLink: () => signInWithEmailLink,\n  signInWithPhoneNumber: () => signInWithPhoneNumber,\n  signInWithPopup: () => signInWithPopup,\n  signInWithRedirect: () => signInWithRedirect,\n  signOut: () => signOut,\n  unlink: () => unlink,\n  updateCurrentUser: () => updateCurrentUser,\n  updateEmail: () => updateEmail,\n  updatePassword: () => updatePassword,\n  updatePhoneNumber: () => updatePhoneNumber,\n  updateProfile: () => updateProfile,\n  useDeviceLanguage: () => useDeviceLanguage,\n  validatePassword: () => validatePassword,\n  verifyBeforeUpdateEmail: () => verifyBeforeUpdateEmail,\n  verifyPasswordResetCode: () => verifyPasswordResetCode\n});\n__reExport(firebase_exports, auth_star);\nimport * as auth_star from \"firebase/auth\";\nimport { ɵzoneWrap as ɵzoneWrap2 } from \"@angular/fire\";\nimport { applyActionCode as _applyActionCode, beforeAuthStateChanged as _beforeAuthStateChanged, checkActionCode as _checkActionCode, confirmPasswordReset as _confirmPasswordReset, connectAuthEmulator as _connectAuthEmulator, createUserWithEmailAndPassword as _createUserWithEmailAndPassword, deleteUser as _deleteUser, fetchSignInMethodsForEmail as _fetchSignInMethodsForEmail, getAdditionalUserInfo as _getAdditionalUserInfo, getAuth as _getAuth, getIdToken as _getIdToken, getIdTokenResult as _getIdTokenResult, getMultiFactorResolver as _getMultiFactorResolver, getRedirectResult as _getRedirectResult, initializeAuth as _initializeAuth, initializeRecaptchaConfig as _initializeRecaptchaConfig, isSignInWithEmailLink as _isSignInWithEmailLink, linkWithCredential as _linkWithCredential, linkWithPhoneNumber as _linkWithPhoneNumber, linkWithPopup as _linkWithPopup, linkWithRedirect as _linkWithRedirect, multiFactor as _multiFactor, onAuthStateChanged as _onAuthStateChanged, onIdTokenChanged as _onIdTokenChanged, parseActionCodeURL as _parseActionCodeURL, reauthenticateWithCredential as _reauthenticateWithCredential, reauthenticateWithPhoneNumber as _reauthenticateWithPhoneNumber, reauthenticateWithPopup as _reauthenticateWithPopup, reauthenticateWithRedirect as _reauthenticateWithRedirect, reload as _reload, revokeAccessToken as _revokeAccessToken, sendEmailVerification as _sendEmailVerification, sendPasswordResetEmail as _sendPasswordResetEmail, sendSignInLinkToEmail as _sendSignInLinkToEmail, setPersistence as _setPersistence, signInAnonymously as _signInAnonymously, signInWithCredential as _signInWithCredential, signInWithCustomToken as _signInWithCustomToken, signInWithEmailAndPassword as _signInWithEmailAndPassword, signInWithEmailLink as _signInWithEmailLink, signInWithPhoneNumber as _signInWithPhoneNumber, signInWithPopup as _signInWithPopup, signInWithRedirect as _signInWithRedirect, signOut as _signOut, unlink as _unlink, updateCurrentUser as _updateCurrentUser, updateEmail as _updateEmail, updatePassword as _updatePassword, updatePhoneNumber as _updatePhoneNumber, updateProfile as _updateProfile, useDeviceLanguage as _useDeviceLanguage, validatePassword as _validatePassword, verifyBeforeUpdateEmail as _verifyBeforeUpdateEmail, verifyPasswordResetCode as _verifyPasswordResetCode } from \"firebase/auth\";\nvar applyActionCode = ɵzoneWrap2(_applyActionCode, true);\nvar beforeAuthStateChanged = ɵzoneWrap2(_beforeAuthStateChanged, true);\nvar checkActionCode = ɵzoneWrap2(_checkActionCode, true);\nvar confirmPasswordReset = ɵzoneWrap2(_confirmPasswordReset, true);\nvar connectAuthEmulator = ɵzoneWrap2(_connectAuthEmulator, true);\nvar createUserWithEmailAndPassword = ɵzoneWrap2(_createUserWithEmailAndPassword, true);\nvar deleteUser = ɵzoneWrap2(_deleteUser, true);\nvar fetchSignInMethodsForEmail = ɵzoneWrap2(_fetchSignInMethodsForEmail, true);\nvar getAdditionalUserInfo = ɵzoneWrap2(_getAdditionalUserInfo, true);\nvar getAuth = ɵzoneWrap2(_getAuth, true);\nvar getIdToken = ɵzoneWrap2(_getIdToken, true);\nvar getIdTokenResult = ɵzoneWrap2(_getIdTokenResult, true);\nvar getMultiFactorResolver = ɵzoneWrap2(_getMultiFactorResolver, true);\nvar getRedirectResult = ɵzoneWrap2(_getRedirectResult, true);\nvar initializeAuth = ɵzoneWrap2(_initializeAuth, true);\nvar initializeRecaptchaConfig = ɵzoneWrap2(_initializeRecaptchaConfig, true);\nvar isSignInWithEmailLink = ɵzoneWrap2(_isSignInWithEmailLink, true);\nvar linkWithCredential = ɵzoneWrap2(_linkWithCredential, true);\nvar linkWithPhoneNumber = ɵzoneWrap2(_linkWithPhoneNumber, true);\nvar linkWithPopup = ɵzoneWrap2(_linkWithPopup, true);\nvar linkWithRedirect = ɵzoneWrap2(_linkWithRedirect, true);\nvar multiFactor = ɵzoneWrap2(_multiFactor, true);\nvar onAuthStateChanged = ɵzoneWrap2(_onAuthStateChanged, true);\nvar onIdTokenChanged = ɵzoneWrap2(_onIdTokenChanged, true);\nvar parseActionCodeURL = ɵzoneWrap2(_parseActionCodeURL, true);\nvar reauthenticateWithCredential = ɵzoneWrap2(_reauthenticateWithCredential, true);\nvar reauthenticateWithPhoneNumber = ɵzoneWrap2(_reauthenticateWithPhoneNumber, true);\nvar reauthenticateWithPopup = ɵzoneWrap2(_reauthenticateWithPopup, true);\nvar reauthenticateWithRedirect = ɵzoneWrap2(_reauthenticateWithRedirect, true);\nvar reload = ɵzoneWrap2(_reload, true);\nvar revokeAccessToken = ɵzoneWrap2(_revokeAccessToken, true);\nvar sendEmailVerification = ɵzoneWrap2(_sendEmailVerification, true);\nvar sendPasswordResetEmail = ɵzoneWrap2(_sendPasswordResetEmail, true);\nvar sendSignInLinkToEmail = ɵzoneWrap2(_sendSignInLinkToEmail, true);\nvar setPersistence = ɵzoneWrap2(_setPersistence, true);\nvar signInAnonymously = ɵzoneWrap2(_signInAnonymously, true);\nvar signInWithCredential = ɵzoneWrap2(_signInWithCredential, true);\nvar signInWithCustomToken = ɵzoneWrap2(_signInWithCustomToken, true);\nvar signInWithEmailAndPassword = ɵzoneWrap2(_signInWithEmailAndPassword, true);\nvar signInWithEmailLink = ɵzoneWrap2(_signInWithEmailLink, true);\nvar signInWithPhoneNumber = ɵzoneWrap2(_signInWithPhoneNumber, true);\nvar signInWithPopup = ɵzoneWrap2(_signInWithPopup, true);\nvar signInWithRedirect = ɵzoneWrap2(_signInWithRedirect, true);\nvar signOut = ɵzoneWrap2(_signOut, true);\nvar unlink = ɵzoneWrap2(_unlink, true);\nvar updateCurrentUser = ɵzoneWrap2(_updateCurrentUser, true);\nvar updateEmail = ɵzoneWrap2(_updateEmail, true);\nvar updatePassword = ɵzoneWrap2(_updatePassword, true);\nvar updatePhoneNumber = ɵzoneWrap2(_updatePhoneNumber, true);\nvar updateProfile = ɵzoneWrap2(_updateProfile, true);\nvar useDeviceLanguage = ɵzoneWrap2(_useDeviceLanguage, true);\nvar validatePassword = ɵzoneWrap2(_validatePassword, true);\nvar verifyBeforeUpdateEmail = ɵzoneWrap2(_verifyBeforeUpdateEmail, true);\nvar verifyPasswordResetCode = ɵzoneWrap2(_verifyPasswordResetCode, true);\n\n// public_api.mjs\n__reExport(public_api_exports, firebase_exports);\n\n// angular-fire-auth.mjs\n__reExport(angular_fire_auth_exports, public_api_exports);\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, revokeAccessToken, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };\n"],
  "mappings": "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",
  "names": ["user", "applyActionCode", "authState", "beforeAuthStateChanged", "checkActionCode", "confirmPasswordReset", "connectAuthEmulator", "createUserWithEmailAndPassword", "deleteUser", "fetchSignInMethodsForEmail", "getAdditionalUserInfo", "getAuth", "getIdToken", "getIdTokenResult", "getMultiFactorResolver", "getRedirectResult", "idToken", "initializeAuth", "initializeRecaptchaConfig", "isSignInWithEmailLink", "linkWithCredential", "linkWithPhoneNumber", "linkWithPopup", "linkWithRedirect", "multiFactor", "onAuthStateChanged", "onIdTokenChanged", "parseActionCodeURL", "reauthenticateWithCredential", "reauthenticateWithPhoneNumber", "reauthenticateWithPopup", "reauthenticateWithRedirect", "reload", "revokeAccessToken", "sendEmailVerification", "sendPasswordResetEmail", "sendSignInLinkToEmail", "setPersistence", "signInAnonymously", "signInWithCredential", "signInWithCustomToken", "signInWithEmailAndPassword", "signInWithEmailLink", "signInWithPhoneNumber", "signInWithPopup", "signInWithRedirect", "signOut", "unlink", "updateCurrentUser", "updateEmail", "updatePassword", "updatePhoneNumber", "updateProfile", "useDeviceLanguage", "user", "validatePassword", "verifyBeforeUpdateEmail", "verifyPasswordResetCode"]
}
